version: 2.1

orbs:
  go: circleci/go@1.7

parameters:
  go-version:
    type: string
    default: '1.21.9'

executors:
  node:
    docker:
      - image: node:20-slim
  golang:
    parameters:
      variant:
        description: "variant (ex. alpine)"
        default: ""
        type: string
    docker:
      # Resolves to golang:<go-version> or golang:<go-version>-<variant> (if variant supplied)
      - image: golang:<< pipeline.parameters.go-version >><<# parameters.variant >>-<< parameters.variant >><</ parameters.variant >>
  centos7:
    docker:
      - image: centos:7
  almalinux8:
    docker:
      - image: almalinux:8
  almalinux9:
    docker:
      - image: almalinux:9
  ubuntu2004:
    docker:
      - image: ubuntu:20.04
  ubuntu2204:
    docker:
      - image: ubuntu:22.04
  golangci-lint:
    docker:
      - image: golangci/golangci-lint:v1.57.1
  ubuntu-machine:
    machine:
      image: ubuntu-2204:2022.10.2
  ubuntu-machine-large:
    machine:
      image: ubuntu-2204:2022.10.2
    resource_class: large

commands:
  update-submodules:
    steps:
      - run:
          name: Update submodules
          command: git submodule update --init
  check-pkg-no-buildcfg:
    steps:
      - run:
          name: Check pkg/... doesn't depend on buildcfg
          command: |-
            if $(/usr/local/go/bin/go list -f '{{.Deps}}' ./pkg/... | grep -q buildcfg)
            then
              echo "Prohibited buildcfg dependency found in pkg/:"
              echo
              /usr/local/go/bin/go list -f '{{.ImportPath}} - {{.Deps}}' ./pkg/... | grep buildcfg
              exit 1
            fi
  stop-background-apt:
    steps:
      - run:
          name: Stop background apt updates
          # https://discuss.circleci.com/t/could-not-get-lock-var-lib-apt-lists-lock/28337/4
          command: sudo killall -9 apt-get || true
  install-deps-apt:
    parameters:
      sudo:
        type: boolean
        default: true
    steps:
      - run:
          name: Update package indexes
          command: |-
            # See https://discuss.circleci.com/t/heroku-gpg-issues-in-ubuntu-images/43834/1
            <<# parameters.sudo >>sudo <</ parameters.sudo >>rm -rf /etc/apt/sources.list.d/heroku.list
            <<# parameters.sudo >>sudo <</ parameters.sudo >>apt-get -q update
      - run:
          name: Install dependencies
          command: |-
            <<# parameters.sudo >>sudo <</ parameters.sudo >>DEBIAN_FRONTEND=noninteractive apt-get -q install -y autoconf \
              automake \
              build-essential \
              cryptsetup \
              fuse2fs \
              git \
              libfuse-dev \
              libglib2.0-dev \
              libseccomp-dev \
              libtool \
              pkg-config \
              squashfs-tools \
              squashfs-tools-ng \
              uidmap \
              zlib1g-dev
      - run:
          name: Install proot
          command: |-
            <<# parameters.sudo >>sudo <</ parameters.sudo >>curl -L -o /usr/local/bin/proot https://proot.gitlab.io/proot/bin/proot
            <<# parameters.sudo >>sudo <</ parameters.sudo >>chmod +x /usr/local/bin/proot
      - run:
          name: Install crun
          command: |-
            <<# parameters.sudo >>sudo <</ parameters.sudo >>curl -L -o /usr/local/bin/crun https://github.com/containers/crun/releases/download/1.14.4/crun-1.14.4-linux-amd64
            <<# parameters.sudo >>sudo <</ parameters.sudo >>chmod +x /usr/local/bin/crun

  cgroups-delegation:
    steps:
      - run:
          name: Enable full cgroups v2 delegation
          command: |-
            sudo mkdir -p /etc/systemd/system/user@.service.d
            cat \<<EOF | sudo tee /etc/systemd/system/user@.service.d/delegate.conf
            [Service]
            Delegate=cpu cpuset io memory pids
            EOF
            sudo systemctl daemon-reload

  configure-singularity:
    steps:
      - run:
          name: Configure Singularity
          command: ./mconfig -v -p /usr/local
  build-singularity:
    steps:
      - configure-singularity
      - run:
          name: Build Singularity
          command: make -C ./builddir all
  install-singularity:
    steps:
      - build-singularity
      - run:
          name: Install Singularity
          command: sudo make -C ./builddir install

jobs:
  lint-markdown:
    executor: node
    steps:
      - run:
          name: Install markdownlint
          command: npm install -g markdownlint-cli
      - checkout
      - run:
          name: Check for Lint
          command: markdownlint --ignore LICENSE_DEPENDENCIES.md .

  check-go-mod:
    executor: golang
    steps:
      - checkout
      - run:
          name: Go Mod Tidy
          command: go mod tidy
      - run:
          name: Check Module Tidiness
          command: git diff --exit-code -- go.mod go.sum

  check-test-corpus:
    executor: golang
    steps:
      - checkout
      - run:
          name: Generate Certificates
          command: pushd test/certs/ && go run ./gen_certs.go && popd
      - run:
          name: Check Test Corpus Tidiness
          command: git diff --exit-code --

  check-license-dependencies:
    executor: golang
    steps:
      - checkout
      - run:
          name: Update LICENSE_DEPENDENCIES.md
          command: scripts/update-license-dependencies.sh
      - run:
          name: Check License Changes
          command: git diff --exit-code -- LICENSE_DEPENDENCIES.md

  build-source-alpine:
    executor:
      name: golang
      variant: alpine
    steps:
      - checkout
      - run:
          name: Fetch deps
          command: |-
            apk add -q --no-cache alpine-sdk \
              autoconf \
              automake \
              cryptsetup \
              fuse3-dev \
              gawk \
              git \
              glib-dev \
              libseccomp-dev \
              libtool \
              sed \
              squashfs-tools
      - update-submodules
      - build-singularity

  lint-source:
    executor: golangci-lint
    steps:
      - checkout
      - install-deps-apt:
          sudo: false
      - update-submodules
      - configure-singularity
      - run:
          name: Check for Lint
          command: make -C ./builddir check
      - check-pkg-no-buildcfg

  short-unit-tests:
    executor: ubuntu-machine
    steps:
      - checkout
      - go/install:
          version: << pipeline.parameters.go-version >>
      - stop-background-apt
      - install-deps-apt
      - update-submodules
      - install-singularity
      - run:
          name: Run unit tests
          command: make -C ./builddir short-unit-test

  integration-tests:
    executor: ubuntu-machine
    steps:
      - checkout
      - go/install:
          version: << pipeline.parameters.go-version >>
      - stop-background-apt
      - install-deps-apt
      - update-submodules
      - install-singularity
      - run:
          name: Run integration tests
          no_output_timeout: 20m
          command: make -C ./builddir integration-test

  e2e-tests:
    executor: ubuntu-machine-large
    steps:
      - checkout
      - go/install:
          version: << pipeline.parameters.go-version >>
      - stop-background-apt
      - install-deps-apt
      - cgroups-delegation
      - update-submodules
      - install-singularity
      - run:
          name: Run E2E tests
          no_output_timeout: 35m
          command: |-
            # CircleCI image sets DBUS_SESSION_BUS_ADDRESS to /dev/null to avoid
            # issues with headless browser testing tools, but we must have a
            # working dbus for cgroups tests.
            systemctl --user daemon-reload
            systemctl --user start dbus
            export DBUS_SESSION_BUS_ADDRESS=unix:path=/run/user/$UID/bus

            # CircleCI agent starts our command in a cgroup with resource files
            # owned by root. For rootless cgroup tests, we must be in a cgroup
            # owned by ourselves.
            systemd-run --user --scope sh -c ' \
              export E2E_PARALLEL=8 && \
              export E2E_DOCKER_USERNAME=$CIRCLE_CI_DOCKER_USERNAME && \
              export E2E_DOCKER_PASSWORD=$CIRCLE_CI_DOCKER_PASSWORD && \
              make -C ./builddir e2e-test'
      - store_artifacts:
          path: builddir/e2e-cmd-report.txt

  build-rpm:
    parameters:
      e:
        type: executor
    executor: << parameters.e >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |-
            yum groupinstall -q -y 'Development Tools'
            yum install -q -y autoconf \
             automake \
             cryptsetup \
             fuse3-devel \
             glib2-devel \
             libseccomp-devel \
             libtool \
             squashfs-tools \
             zlib-devel
      - run:
          name: Install Go
          command: |-
            curl -f -L -sS "https://dl.google.com/go/go<< pipeline.parameters.go-version >>.linux-amd64.tar.gz" | tar -z -x -C /usr/local/
            echo "export PATH=$PATH:/usr/local/go/bin" >> $BASH_ENV
      - update-submodules
      - configure-singularity
      - run:
          name: Build RPM
          command: make -C builddir rpm
      - run:
          name: Install RPM
          command: yum install -q -y $HOME/rpmbuild/RPMS/*/*.rpm
      - run:
          name: Run SingularityCE
          command: singularity version
      - store_artifacts:
          path: ~/rpmbuild/RPMS

  build-deb:
    parameters:
      e:
        type: executor
    executor: << parameters.e >>
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |-
            apt-get update
            DEBIAN_FRONTEND=noninteractive apt-get install -y autoconf \
              automake \
              build-essential \
              cryptsetup \
              devscripts \
              dh-golang \
              fakeroot \
              git \
              libfuse-dev \
              libglib2.0-dev \
              libseccomp-dev \
              libtool \
              pkg-config \
              squashfs-tools \
              uidmap \
              zlib1g-dev
      - run:
          name: Install Go
          command: |-
            curl -f -L -sS "https://dl.google.com/go/go<< pipeline.parameters.go-version >>.linux-amd64.tar.gz" | tar -z -x -C /usr/local/
            echo "export PATH=$PATH:/usr/local/go/bin" >> $BASH_ENV
      - update-submodules
      - run:
          name: Build DEB
          command: |-
            dpkg-buildpackage -b -rfakeroot -us -uc
            mkdir -p ~/deb
            cp ../*.deb ~/deb/
      - run:
          name: Install DEB
          command: apt install -y ~/deb/*.deb
      - run:
          name: Run SingularityCE
          command: singularity version
      - store_artifacts:
          path: ~/deb

workflows:
  version: 2
  build_and_test:
    jobs:
      - lint-markdown
      - check-go-mod
      - check-test-corpus
      - check-license-dependencies
      - build-source-alpine
      - lint-source
      - short-unit-tests
      - integration-tests
      - e2e-tests
      - build-rpm:
          matrix:
            parameters:
              e: ["centos7", "almalinux8", "almalinux9"]
          filters:
            branches:
              only:
                - main
                - /release-.*/

      - build-deb:
          matrix:
            parameters:
              e: ["ubuntu2004", "ubuntu2204"]
          filters:
            branches:
              only:
                - main
                - /release-.*/

  tagged-release:
    jobs:
      - build-rpm:
          matrix:
            parameters:
              e: ["centos7", "almalinux8", "almalinux9"]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v[0-9]+(\.[0-9]+)*(-.*)*/

      - build-deb:
          matrix:
            parameters:
              e: ["ubuntu2004", "ubuntu2204"]
          filters:
            branches:
              ignore: /.*/
            tags:
              only: /v[0-9]+(\.[0-9]+)*(-.*)*/
